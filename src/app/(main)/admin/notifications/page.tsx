
"use client";

import { useState, useEffect } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useLanguage } from '@/hooks/use-language';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { db } from '@/lib/firebase';
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { Loader2, Bell, Link as LinkIcon, AlertTriangle, LogIn } from 'lucide-react';
import { useRouter } from 'next/navigation';
import Link from 'next/link'; // Next.js Link

const ADMIN_LOGGED_IN_KEY = 'adminLoggedInGoSwami';
const NOTIFICATIONS_COLLECTION = 'notifications';

const notificationTypes = [
  { value: 'youtube_update', labelKey: 'youtubeUpdateType' },
  { value: 'general_announcement', labelKey: 'generalAnnouncementType' },
  { value: 'new_live_class', labelKey: 'new_live_class' }, // For consistency if admin wants to manually add
  { value: 'new_schedule_item', labelKey: 'new_schedule_item' },
  { value: 'new_homework_assignment', labelKey: 'new_homework_assignment' },
  { value: 'new_academy_update', labelKey: 'new_academy_update' },
];

const formSchemaDefinition = (t: (key: string) => string) => z.object({
  message: z.string().min(10, { message: t('messageValidation') || "Message must be at least 10 characters." }),
  link: z.string().url({ message: t('validationUrl') || "Please enter a valid URL." }).optional().or(z.literal('')),
  type: z.string().min(1, { message: t('notificationTypeValidation') || "Notification type is required." }),
});

type ManualNotificationFormValues = z.infer<ReturnType<typeof formSchemaDefinition>>;

export default function ManualNotificationsPage() {
  const { t } = useLanguage();
  const { toast } = useToast();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true); // Page loading
  const [isSubmitting, setIsSubmitting] = useState(false); // Form submission
  const [isAuthorized, setIsAuthorized] = useState(false);
  
  const currentFormSchema = formSchemaDefinition(t);

  const form = useForm<ManualNotificationFormValues>({
    resolver: zodResolver(currentFormSchema),
    defaultValues: { message: "", link: "", type: "general_announcement" },
  });

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isAdminLoggedIn = localStorage.getItem(ADMIN_LOGGED_IN_KEY) === 'true';
      if (!isAdminLoggedIn) {
        setIsAuthorized(false);
        // router.replace('/login'); // Redirect if not authorized handled below
      } else {
        setIsAuthorized(true);
      }
      setIsLoading(false);
    }
  }, [router]);


  const onSubmit: SubmitHandler<ManualNotificationFormValues> = async (data) => {
    setIsSubmitting(true);
    try {
      await addDoc(collection(db, NOTIFICATIONS_COLLECTION), {
        message: data.message,
        link: data.link || '#', // Use # if link is empty, consistent with header
        type: data.type,
        timestamp: serverTimestamp(),
        autoGenerated: false, // This is a manually created notification
      });
      toast({ title: t('notificationAddedSuccess') });
      form.reset();
    } catch (error: any) {
      console.error("Error adding manual notification:", error);
      toast({
        title: t('errorOccurred'),
        description: `${t('saveErrorDetails')} ${error.message ? `(${error.message})` : ''}`,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="ml-2">{t('loading')}</p>
      </div>
    );
  }

  if (!isAuthorized) {
     return (
        <div className="max-w-2xl mx-auto space-y-8 text-center py-10">
            <Card className="shadow-xl border-destructive">
                <CardHeader>
                    <CardTitle className="text-2xl text-destructive flex items-center justify-center gap-2">
                        <AlertTriangle /> {t('accessDenied')}
                    </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <p>{t('accessDeniedMessage')}</p>
                    <p className="mt-2 text-sm text-muted-foreground">
                      {t('adminMustLoginViaDedicatedPage') || "Please log in as an administrator via the admin login page to access this panel."}
                    </p>
                    <Button asChild>
                      <Link href="/login">
                        <LogIn className="mr-2 h-4 w-4" /> {t('adminLoginNav')}
                      </Link>
                    </Button>
                </CardContent>
            </Card>
        </div>
    );
  }


  return (
    <div className="max-w-2xl mx-auto">
      <Card className="shadow-xl">
        <CardHeader className="text-center">
          <Bell className="h-12 w-12 text-primary mx-auto mb-3" />
          <CardTitle className="text-3xl font-bold font-headline text-primary">{t('addManualNotificationTitle')}</CardTitle>
          <CardDescription>{t('manageNotificationsDesc')}</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="message"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t('notificationMessageLabel')}</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder={t('notificationMessagePlaceholder')}
                        {...field}
                        rows={4}
                        className="text-base md:text-sm"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="link"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t('notificationLinkLabel')} (<LinkIcon className="inline h-3 w-3 mr-1"/>{t('optional') || 'Optional'})</FormLabel>
                    <FormControl>
                      <Input
                        type="url"
                        placeholder={t('notificationLinkPlaceholder')}
                        {...field}
                        className="text-base md:text-sm"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t('notificationTypeLabel')}</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder={t('notificationTypePlaceholder')} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {notificationTypes.map(type => (
                          <SelectItem key={type.value} value={type.value}>
                            {t(type.labelKey as any) || type.value.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full bg-accent text-accent-foreground hover:bg-accent/90 text-lg h-12" disabled={isSubmitting}>
                {isSubmitting ? (<><Loader2 className="mr-2 h-5 w-5 animate-spin" />{t('loading')}</>) : <Bell className="mr-2 h-5 w-5" />}
                {t('addNotificationButton')}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

// Add new keys to translations:
// manageNotificationsTitle: "Manage Notifications",
// manageNotificationsDesc: "Create and send custom notifications to users.",
// adminManageNotificationsNote: "Admin: Create and manage custom notifications here.",
// addManualNotificationTitle: "Add Manual Notification",
// notificationMessageLabel: "Notification Message",
// notificationMessagePlaceholder: "Enter the full notification text...",
// notificationLinkLabel: "Link (Optional)",
// notificationLinkPlaceholder: "e.g., https://www.youtube.com/watch?v=...",
// notificationTypeLabel: "Notification Type",
// notificationTypePlaceholder: "Select a type for the notification",
// addNotificationButton: "Add Notification",
// notificationAddedSuccess: "Notification added successfully!",
// youtubeUpdateType: "YouTube Update",
// generalAnnouncementType: "General Announcement"
// notificationAllFieldsRequired: "Message and Type are required."
// new_live_class: "New Live Class", (already exists but might be used in dropdown)
// new_schedule_item: "New Schedule Item",
// new_homework_assignment: "New Homework Assignment",
// new_academy_update: "New Academy Update"
// optional: "Optional"
// notificationTypeValidation: "Notification type is required."
