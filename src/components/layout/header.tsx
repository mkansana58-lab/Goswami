
"use client";

import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useLanguage } from '@/hooks/use-language';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuLabel } from '@/components/ui/dropdown-menu';
import { cn } from '@/lib/utils';
import * as VisuallyHidden from '@radix-ui/react-visually-hidden';
import {
  BookText, ClipboardCheck, PlaySquare, Users, Cpu, Languages, ShieldCheck, GraduationCap, Star, ClipboardList, Menu, LogOut, LayoutDashboard,
  Home, DownloadCloud, MoreHorizontal, ScissorsLineDashed, HelpingHand, FileText, MessageSquare, Briefcase, BookOpen, ListChecks, Bell, LogIn,
  Gift, History, Newspaper, CalendarDays, CheckCircle, XCircle, Info, Tv2, School, Library, UserCircle, Settings, Mail, PackageSearch, Youtube, Megaphone
} from 'lucide-react'; 
import { Sheet, SheetContent, SheetTrigger, SheetTitle as RadixSheetTitle } from '@/components/ui/sheet';
import React, { useEffect, useState } from 'react';
import { db } from '@/lib/firebase';
import { collection, query, orderBy, limit, getDocs, Timestamp, serverTimestamp, addDoc, onSnapshot } from 'firebase/firestore';
import Image from 'next/image';
import { STUDENT_LOGGED_IN_KEY, STUDENT_USERNAME_KEY, STUDENT_PROFILE_LOCALSTORAGE_KEY } from '@/lib/constants';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";


const primaryNavLinks = [
  { href: '/', labelKey: 'navHome', icon: Home },
  { href: '/study-material', labelKey: 'navStudyMaterial', icon: Library },
  { href: '/learning-hub', labelKey: 'navLearningHub', icon: PackageSearch },
  { href: '/tests', labelKey: 'testSeries', icon: ClipboardCheck },
];

const secondaryNavLinks = [
  { href: '/latest-news', labelKey: 'navLatestNews', icon: Newspaper },
  { href: '/current-affairs', labelKey: 'currentAffairs', icon: Newspaper },
  { href: '/syllabus', labelKey: 'navSyllabus', icon: ListChecks },
  { href: '/study-books', labelKey: 'ourBooks', icon: BookOpen },
  { href: '/job-alerts', labelKey: 'navJobAlerts', icon: Briefcase },
  { href: '/scholarship', labelKey: 'navScholarship', icon: Users },
  { href: '/ai-tutor', labelKey: 'navAITutor', icon: Cpu },
  { href: '/cutoff-checker', labelKey: 'navCutOffChecker', icon: ScissorsLineDashed },
  { href: '/chat', labelKey: 'navChat', icon: MessageSquare },
  { href: '/sainik-e-counselling', labelKey: 'navSainikECounselling', icon: School },
  { href: '/contact', labelKey: 'navContact', icon: Mail },
];

const adminConsoleNavLinks = [
  { href: '/admin', labelKey: 'navAdminPanel', icon: LayoutDashboard },
  { href: '/registrations', labelKey: 'navViewRegistrations', icon: ClipboardList },
  { href: '/admin/notifications', labelKey: 'manageNotificationsTitle', icon: Bell}
];

const studentNavLinks = [
    { href: '/student-profile', labelKey: 'studentProfileTitle', icon: UserCircle },
    { href: '/settings', labelKey: 'settings', icon: Settings },
];


const ADMIN_LOGGED_IN_KEY = 'adminLoggedInGoSwami';
const NOTIFICATIONS_COLLECTION = 'notifications';
const LAST_NOTIFICATION_VIEW_KEY = 'lastNotificationViewTimeGoSwami';


interface AppNotification {
  id: string;
  message: string;
  type: string;
  link?: string;
  timestamp: Timestamp;
  autoGenerated?: boolean;
}

interface StudentProfileHeader {
  name?: string;
  photoDataUrl?: string;
  dataAiHint?: string;
}

export function Header() {
  const { language, setLanguage, t } = useLanguage();
  const pathname = usePathname();
  const router = useRouter();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = React.useState(false);
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);
  const [isStudentLoggedIn, setIsStudentLoggedIn] = useState(false);
  const [studentProfile, setStudentProfile] = useState<StudentProfileHeader | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [notifications, setNotifications] = useState<AppNotification[]>([]);
  const [hasUnreadNotifications, setHasUnreadNotifications] = useState(false);

  const checkLoginStatus = () => {
    if (typeof window !== 'undefined') {
      const adminStatus = localStorage.getItem(ADMIN_LOGGED_IN_KEY) === 'true';
      const studentStatus = localStorage.getItem(STUDENT_LOGGED_IN_KEY) === 'true';
      setIsAdminLoggedIn(adminStatus);
      setIsStudentLoggedIn(studentStatus);

      if (studentStatus) {
        const profileRaw = localStorage.getItem(STUDENT_PROFILE_LOCALSTORAGE_KEY);
        if (profileRaw) {
          try {
            const parsedProfile: StudentProfileHeader = JSON.parse(profileRaw);
            setStudentProfile(parsedProfile);
          } catch (e) {
            console.error("Error parsing student profile from localStorage", e);
            setStudentProfile(null);
          }
        } else {
           setStudentProfile(null);
        }
      } else {
        setStudentProfile(null);
      }
    }
  };

  useEffect(() => {
    setIsClient(true);
    checkLoginStatus(); 

    window.addEventListener('studentProfileUpdated', checkLoginStatus);
    window.addEventListener('studentLoggedOut', checkLoginStatus);

    return () => {
      window.removeEventListener('studentProfileUpdated', checkLoginStatus);
      window.removeEventListener('studentLoggedOut', checkLoginStatus);
    };
  }, []); 

   useEffect(() => { 
    if(isClient) {
      checkLoginStatus();
    }
  }, [pathname, isClient]);

  useEffect(() => {
    if (!isClient) return;
    const q = query(collection(db, NOTIFICATIONS_COLLECTION), orderBy("timestamp", "desc"), limit(10));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fetchedNotifications: AppNotification[] = [];
      querySnapshot.forEach((doc) => {
        fetchedNotifications.push({ id: doc.id, ...doc.data() } as AppNotification);
      });
      setNotifications(fetchedNotifications);
      if (fetchedNotifications.length > 0) {
        const lastViewTime = localStorage.getItem(LAST_NOTIFICATION_VIEW_KEY);
        const latestNotificationTime = fetchedNotifications[0].timestamp.toMillis();
        setHasUnreadNotifications(!lastViewTime || latestNotificationTime > parseInt(lastViewTime, 10));
      } else {
        setHasUnreadNotifications(false);
      }
    }, (error) => {
      console.error("Header: Error fetching notifications:", error);
    });
    return () => unsubscribe();
  }, [isClient]);

  const handleAdminLogout = () => {
    if (typeof window !== 'undefined') localStorage.removeItem(ADMIN_LOGGED_IN_KEY);
    setIsAdminLoggedIn(false);
    setIsMobileMenuOpen(false);
    router.push('/');
    router.refresh();
  };

  const handleStudentLogout = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STUDENT_LOGGED_IN_KEY);
      localStorage.removeItem(STUDENT_USERNAME_KEY);
      localStorage.removeItem(STUDENT_PROFILE_LOCALSTORAGE_KEY);
      window.dispatchEvent(new Event('studentLoggedOut'));
    }
    setIsStudentLoggedIn(false);
    setStudentProfile(null);
    setIsMobileMenuOpen(false);
    router.push('/student-login');
  };

  const handleNotificationDropdownOpenChange = (open: boolean) => {
    if (!open && hasUnreadNotifications && notifications.length > 0) {
      localStorage.setItem(LAST_NOTIFICATION_VIEW_KEY, notifications[0].timestamp.toMillis().toString());
      setHasUnreadNotifications(false);
    }
  };

  const allMobileNavLinks = [
    ...primaryNavLinks,
    ...(isClient && isStudentLoggedIn ? studentNavLinks : []),
    ...secondaryNavLinks,
    ...(isClient && isAdminLoggedIn ? adminConsoleNavLinks : []),
  ].filter((link, index, self) => index === self.findIndex((l) => l.href === link.href && l.labelKey === l.labelKey));

  const uniqueSecondaryLinksForDesktop = secondaryNavLinks
    .filter(link => !primaryNavLinks.some(pLink => pLink.href === link.href && pLink.labelKey === pLink.labelKey))
    .filter((link, index, self) => index === self.findIndex((l) => l.href === link.href && l.labelKey === l.labelKey));

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'new_live_class': return <Tv2 className="h-4 w-4 text-blue-500 flex-shrink-0" />;
      case 'new_schedule_item': return <CalendarDays className="h-4 w-4 text-green-500 flex-shrink-0" />;
      case 'new_homework_assignment': return <ListChecks className="h-4 w-4 text-orange-500 flex-shrink-0" />;
      case 'new_academy_update': return <Info className="h-4 w-4 text-purple-500 flex-shrink-0" />;
      case 'youtube_update': return <Youtube className="h-4 w-4 text-red-500 flex-shrink-0" />;
      case 'general_announcement': return <Megaphone className="h-4 w-4 text-yellow-500 flex-shrink-0" />;
      case 'news_item': return <Newspaper className="h-4 w-4 text-teal-500 flex-shrink-0" />;
      default: return <Bell className="h-4 w-4 text-gray-500 flex-shrink-0" />;
    }
  };

  const ProfileMenu = () => (
    <DropdownMenu>
        <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
                 <Avatar className="h-8 w-8">
                  <AvatarImage src={studentProfile?.photoDataUrl} alt={studentProfile?.name || t('profilePhotoAlt')} data-ai-hint={studentProfile?.dataAiHint || "student avatar"}/>
                  <AvatarFallback className="bg-primary text-primary-foreground">
                    {studentProfile?.name?.[0]?.toUpperCase() || 'S'}
                  </AvatarFallback>
                </Avatar>
            </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="bg-popover border-border shadow-lg">
            <DropdownMenuLabel>{studentProfile?.name || t('navAccount')}</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild><Link href="/student-profile"><UserCircle className="mr-2 h-4 w-4"/> {t('studentProfileTitle')}</Link></DropdownMenuItem>
            <DropdownMenuItem asChild><Link href="/settings"><Settings className="mr-2 h-4 w-4"/> {t('settings')}</Link></DropdownMenuItem>
            {isAdminLoggedIn && (
                <>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem asChild><Link href="/admin"><LayoutDashboard className="mr-2 h-4 w-4"/> {t('navAdminPanel')}</Link></DropdownMenuItem>
                </>
            )}
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={handleStudentLogout} className="text-destructive focus:text-destructive">
                <LogOut className="mr-2 h-4 w-4"/> {t('studentLogoutButton')}
            </DropdownMenuItem>
        </DropdownMenuContent>
    </DropdownMenu>
  );

  return (
    <header className="bg-background text-foreground sticky top-0 z-50 shadow-md border-b">
      <div className="container mx-auto flex items-center justify-between p-3 h-16">
        <div className="flex items-center gap-2">
            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="text-foreground"><Menu className="h-6 w-6" /><span className="sr-only">Open menu</span></Button>
              </SheetTrigger>
              <SheetContent side="left" className="w-[280px] bg-card p-0 flex flex-col border-r">
                <VisuallyHidden.Root><RadixSheetTitle>{t('mobileMenuTitle')}</RadixSheetTitle></VisuallyHidden.Root>
                <div className="p-4 border-b border-border">
                  <Link href={isClient && isStudentLoggedIn ? "/student-profile" : "/"} className="flex items-center gap-2" onClick={() => setIsMobileMenuOpen(false)}>
                    {isClient && isStudentLoggedIn && studentProfile?.photoDataUrl ? (<Image src={studentProfile.photoDataUrl} alt={studentProfile.name || t('profilePhotoAlt')} width={32} height={32} className="rounded-full h-8 w-8 object-cover" data-ai-hint={studentProfile.dataAiHint || "student avatar"} />)
                     : isClient && isStudentLoggedIn ? (<UserCircle className="h-8 w-8 text-primary" />)
                     : (<ShieldCheck className="h-8 w-8 text-primary" />)}
                    <h2 className="text-lg font-headline font-bold text-primary">{isClient && isStudentLoggedIn && studentProfile?.name ? studentProfile.name : t('appName')}</h2>
                  </Link>
                </div>
                <div className="flex-grow overflow-y-auto p-4 space-y-1">
                  {allMobileNavLinks.map((link) => (
                     <Link key={`mobile-${link.href}-${link.labelKey}`} href={link.href}
                        className={cn("flex items-center gap-3 px-3 py-3 rounded-md text-base font-medium transition-colors hover:bg-muted/50", pathname === link.href ? "bg-primary/10 text-primary font-semibold" : "text-card-foreground")}
                        onClick={() => setIsMobileMenuOpen(false)}>
                        <link.icon className="h-5 w-5 text-primary/80" />{t(link.labelKey as any)}
                      </Link>
                  ))}
                </div>
                <div className="p-4 border-t border-border space-y-2">
                   {isClient && isStudentLoggedIn && (<Button variant="destructive" className="w-full justify-start flex items-center gap-3 text-base font-medium" onClick={handleStudentLogout}><LogOut className="h-5 w-5" /> {t('studentLogoutButton')}</Button>)}
                   {isClient && isAdminLoggedIn && !isStudentLoggedIn && (<Button variant="destructive" className="w-full justify-start flex items-center gap-3 text-base font-medium" onClick={handleAdminLogout}><LogOut className="h-5 w-5" /> {t('adminLogout')}</Button>)}
                   {isClient && !isStudentLoggedIn && (<>
                      <Button variant="outline" className="w-full justify-start" asChild><Link href="/student-login" onClick={() => setIsMobileMenuOpen(false)}><UserCircle className="mr-2 h-5 w-5" /> {t('studentLoginTitle')}</Link></Button>
                      <Button variant="outline" className="w-full justify-start" asChild><Link href="/login" onClick={() => setIsMobileMenuOpen(false)}><ShieldCheck className="mr-2 h-5 w-5" /> {t('adminLoginNav')}</Link></Button>
                   </>)}
                </div>
              </SheetContent>
            </Sheet>
          <Link href={isClient && isStudentLoggedIn ? "/" : "/"} className="flex items-center gap-2 md:hidden">
             <ShieldCheck className="h-8 w-8 text-primary" />
          </Link>
        </div>

        <nav className="hidden md:flex items-center gap-4">
            <Link href="/" className="flex items-center gap-2">
                <ShieldCheck className="h-8 w-8 text-primary" />
                <h1 className="text-xl font-headline font-bold text-primary">{t('appName')}</h1>
            </Link>
        </nav>

        <div className="flex items-center gap-1 md:gap-2">
          <DropdownMenu onOpenChange={handleNotificationDropdownOpenChange}>
            <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="text-foreground hover:bg-muted hover:text-primary relative" title={t('notifications')}><Bell className="h-5 w-5" />{isClient && hasUnreadNotifications && notifications.length > 0 && (<span className="absolute top-1 right-1.5 flex h-2.5 w-2.5"><span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span><span className="relative inline-flex rounded-full h-2.5 w-2.5 bg-primary"></span></span>)}<span className="sr-only">{t('notifications')}</span></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-80 md:w-96 bg-popover border-border shadow-lg max-h-[400px] overflow-y-auto">
              <DropdownMenuLabel className="flex justify-between items-center">{t('notifications')}</DropdownMenuLabel><DropdownMenuSeparator />
              {notifications.length === 0 ? (<DropdownMenuItem disabled className="text-muted-foreground text-center py-4">{t('noNewNotifications')}</DropdownMenuItem>)
               : (notifications.map(notif => (<DropdownMenuItem key={notif.id} asChild className="cursor-pointer focus:bg-muted p-2 hover:bg-muted/80"><Link href={notif.link || '#'} className="flex items-start gap-3 text-sm w-full">{getNotificationIcon(notif.type)}<div className="flex-1 space-y-0.5 overflow-hidden"><p className="font-medium text-popover-foreground line-clamp-3">{notif.message}</p><p className="text-xs text-muted-foreground">{notif.timestamp?.toDate().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})} - {notif.timestamp?.toDate().toLocaleDateString([], {day: '2-digit', month: 'short'})}</p></div></Link></DropdownMenuItem>)))}
            </DropdownMenuContent>
          </DropdownMenu>
          
          {isClient && isStudentLoggedIn ? (
            <ProfileMenu />
          ) : (
            isClient && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="icon"><UserCircle className="h-6 w-6"/></Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuItem asChild><Link href="/student-login"><UserCircle className="mr-2 h-4 w-4"/> {t('studentLoginTitle')}</Link></DropdownMenuItem>
                    <DropdownMenuItem asChild><Link href="/login"><ShieldCheck className="mr-2 h-4 w-4"/> {t('adminLoginNav')}</Link></DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )
          )}
        </div>
      </div>
    </header>
  );
}
